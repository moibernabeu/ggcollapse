get_sisters(atree, 36)
naming_column
#' Get the number of the ancestor of the sister nodes to a specified node.
#'
#' Args:
#' @param tree Phylogenetic tree.
#' @param node The number of name (in case of a tip) to start extracting sister nodes.
#' @param naming_column Column to name the sister groups based on the proportion of the column values among the children tips.
#'
#' @return integer: vector with the sister nodes.
#' @export
#' @author Moisès Bernabeu
get_sisters <- function(tree, node, naming_column=NULL) {
if (typeof(tree) == 'S4') {
if (!is.null(naming_column)) {
tree_data_condition <- TRUE
} else {
tree_data_condition <- FALSE
}
tree_data <- data.frame(treeio::as_tibble(tree)[, -c(1:3)])
tree <- tree@phylo
} else {
tree_data_condition <- FALSE
tree <- tree
}
if (is.character(node)) {
node <- which(tree$tip.label == node)
}
curr_node <- 0
sisters <- c()
prev_sist <- phytools::getSisters(tree, node)
curr_node <- ape::getMRCA(tree, c(prev_sist, node))
while (length(prev_sist) == 1 & curr_node != treeio::rootnode(tree)) {
curr_node <- ape::getMRCA(tree, c(prev_sist, node))
if (!treeio::isTip(tree, prev_sist)) {
sisters <- c(sisters, prev_sist)
descendants <- phytools::getDescendants(tree, prev_sist)
descendants <- tree$tip.label[descendants[which(descendants <= ape::Ntip(tree))]]
if (tree_data_condition) {
desc_summary <- table(tree_data[which(tree_data[, 1] %in% descendants), naming_column]) / length(descendants)
clade_name <- names(which.max(desc_summary))
clade_prop <- desc_summary[which.max(desc_summary)]
names(sisters)[length(sisters)] <- paste(clade_name, ' ', round(clade_prop * 100, 0), '%', sep = '')
}
}
prev_sist <- phytools::getSisters(tree, curr_node)
}
return(sisters)
}
# Getting sisters to node 36
get_sisters(tree, 36)
# Getting sisters to t7
get_sisters(tree, 36)
# Getting sisters to t7
get_sisters(tree, 't7')
# Getting sisters to t7
get_sisters(atree, 't7')
# Getting sisters to t7
get_sisters(atree, 't7', 'group')
# Getting sisters to node 36 annotated with the percentage of tips with a
# certain value of the given naming_column
get_sisters(tree, 36, naming_column = group)
# Getting sisters to node 36 annotated with the percentage of tips with a
# certain value of the given naming_column
get_sisters(atree, 36, naming_column = group)
# Getting sisters to node 36 annotated with the percentage of tips with a
# certain value of the given naming_column
get_sisters(atree, 36, naming_column = 'group')
# ggcollapse
library(treeio)
set.seed(2024-11-04)
tree <- rtree(20)
tree_data <- data.frame(tip = tree$tip.label,
group = c(rep('A', 10), rep('B', 10)))
atree <- annotate_tree(tree = tree,
tree_data = tree_data,
get_sp = get_sp,
dat_sp_column = 1)
mphy <- get_monophyletics(atree, 'group')
mphy
ggcollapse(tree, mphy)
mphy
tree
tree
ggcollapse(tree, mphy)
is(tree)
is(tree, 'phylo')
#' @param nodes Named vector conaining the nodes to collapse.
#' @param collapse_mode String to select the aesthetics of the collapsing triangle, 'mixed', 'min' or 'max'.
#' @param node_colours Vector named with the same names as the nodes with the colour codes.
#' @param get_sp Function to extract the species from the tip.label.
#' @param tree_data Dataframe with the data linked to each species or sequence.
#' @param data_sp_column Column of the tree_data containing the species code.
#'
#' @return Collapsed tree ggplot plot object.
#' @export
#' @author Moisès Bernabeu
ggcollapse <- function(tree, nodes, collapse_mode='mixed', node_colours=NULL,
get_sp=NULL, tree_data=NULL, data_sp_column=NULL) {
if (!methods::is(tree, 'phylo')) {
stop('The tree must be a phylo object.')
}
# Get distances from the tree
dists <- ape::dist.nodes(tree)
# Annotate tree
to_drop <- c()
kept <- c()
ntips <- c()
for (node in 1:length(nodes)) {
# Getting descendants
desc <- phytools::getDescendants(tree, nodes[node])
# Getting just descendant tips
desc <- desc[which(desc <= ape::Ntip(tree))]
# Retrieving the number of tips in the collapsed node
ntips[node] <- length(desc)
# Getting the distances of the node to be collapsed
ndists <- dists[nodes[node], desc]
# Getting nodes to drop and to keep
to_drop_nnode <- as.numeric(names(ndists[-c(which.min(ndists), which.max(ndists))]))
to_keep_nnode <- as.numeric(names(ndists[c(which.min(ndists), which.max(ndists))]))
# Getting tip labels of the nodes to drop
to_drop <- c(to_drop, tree$tip.label[to_drop_nnode])
# Getting the tip labels
kept[[node]] <- c(tree$tip.label[to_keep_nnode])
}
# Prunning the tree to get the vertically symmetric tree
symm_tree <- treeio::drop.tip(tree, to_drop)
# Adjusting the branch lengths to be able to scale the tree horizontally
# and fit it in the final plot.
symm_tree$edge.length <- symm_tree$edge.length / max(diag(ape::vcv(symm_tree)))
# Annotating if all the proper data to annotate the tree is given
if (!is.null(tree_data) & !is.null(get_sp) & !is.null(data_sp_column)) {
symm_tree <- annotate_tree(symm_tree, tree_data, get_sp, data_sp_column)
symm_tree_phylo <- symm_tree@phylo
} else {
symm_tree_phylo <- symm_tree
}
new_nodes <- c()
offset <- c()
vjust <- c()
hjust <- c()
dists <- ape::dist.nodes(symm_tree_phylo)
for (node in 1:length(nodes)) {
new_nodes[node] <- ape::getMRCA(symm_tree_phylo, kept[[node]])
desc <- phytools::getDescendants(symm_tree_phylo, new_nodes[node])
desc <- desc[which(desc <= ape::Ntip(symm_tree_phylo))]
ndists <- dists[new_nodes[node], desc]
if (collapse_mode == 'max') {
offset[node] <- max(ndists)
vjust[node] <- 0.5
hjust[node] <- -0.015
} else if (collapse_mode == 'min') {
offset[node] <- min(ndists)
vjust[node] <- 0.5
hjust[node] <- -0.015
} else if (length(unique(round(ndists, digits = 1))) == 1) {
offset[node] <- mean(ndists)
vjust[node] <- 1
hjust[node] <- -0.015
} else if (collapse_mode == 'mixed') {
offset[node] <- 0.85 * max(ndists)
vjust[node] <- 1
hjust[node] <- 0
}
}
names(new_nodes) <- names(nodes)
names(offset) <- names(nodes)
names(vjust) <- names(nodes)
names(hjust) <- names(nodes)
p <- ggtree::ggtree(symm_tree, ladderize = TRUE, right = TRUE)
if (is.null(node_colours)) {
node_colours <- rep('grey80', length(nodes))
names(node_colours) <- names(nodes)
nodelab_colours <- rep('black', length(nodes))
names(nodelab_colours) <- names(nodes)
} else {
nodelab_colours <- node_colours
}
for (node in 1:length(new_nodes)) {
p <- ggtree::collapse(p, new_nodes[node], mode = collapse_mode,
fill = node_colours[names(nodes)[node]],
colour = 'black')
}
for (node in 1:length(new_nodes)) {
lab = paste0(names(nodes)[node], ' (', ntips[node], ')')
p <- p + ggtree::geom_cladelab(new_nodes[node],
label = lab,
offset.text = offset[node],
hjust = hjust[node],
vjust = vjust[node],
textcolour = nodelab_colours[names(nodes)[node]])
}
return(p)
}
ggcollapse(tree, mphy)
cols <- c('A' = 'steelblue', 'B' = 'darkorange')
mphy <- get_monophyletics(atree, 'group')
ggcollapse(tree, mphy, collapse_mode = 'mixed', node_colours = cols)
sist <- get_sisters(atree, 36)
sist
sist <- get_sisters(atree, 36, 'group')
ggcollapse(tree, sist, collapse_mode = 'mixed', node_colours = cols)
ggcollapse(tree, sist, collapse_mode = 'mixed')
ggcollapse(tree, sist, collapse_mode = 'mixed') +
hexpand(0.5)
ggcollapse(tree, sist, collapse_mode = 'mixed') +
hexpand(0.15)
library(treeio)
set.seed(2024-11-04)
tree <- rtree(20)
tree_data <- data.frame(tip = tree$tip.label,
group = c(rep('A', 10), rep('B', 10)))
atree <- annotate_tree(tree = tree,
tree_data = tree_data,
get_sp = get_sp,
dat_sp_column = 1)
library(treeio)
set.seed(2024-11-04)
tree <- rtree(20)
tree_data <- data.frame(tip = tree$tip.label,
group = c(rep('A', 10), rep('B', 10)))
atree <- annotate_tree(tree = tree,
tree_data = tree_data,
get_sp = get_sp,
dat_sp_column = 1)
# ggcollapse
library(treeio)
set.seed(2024-11-04)
tree <- rtree(20)
tree_data <- data.frame(tip = tree$tip.label,
group = c(rep('A', 10), rep('B', 10)))
atree <- annotate_tree(tree = tree,
tree_data = tree_data,
get_sp = get_sp,
dat_sp_column = 1)
atree <- annotate_tree(tree = tree,
tree_data = tree_data,
get_sp = get_sp,
data_sp_column = 1)
# Get sisters
library(treeio)
get_sp <- function(header) {
return(header)
}
set.seed(2024-11-04)
tree <- rtree(20)
tree_data <- data.frame(tip = tree$tip.label,
group = c(rep('A', 10), rep('B', 10)))
atree <- annotate_tree(tree = tree,
tree_data = tree_data,
get_sp = get_sp,
dat_sp_column = 1)
ggtree(atree) +
geom_nodelab(aes(label = node), geom = 'label') +
geom_tiplab()
# ggcollapse
library(treeio)
set.seed(2024-11-04)
tree <- rtree(20)
tree_data <- data.frame(tip = tree$tip.label,
group = c(rep('A', 10), rep('B', 10)))
atree <- annotate_tree(tree = tree,
tree_data = tree_data,
get_sp = get_sp,
data_sp_column = 1)
cols <- c('A' = 'steelblue', 'B' = 'darkorange')
mphy <- get_monophyletics(atree, 'group')
ggcollapse(tree, mphy, collapse_mode = 'mixed', node_colours = cols)
tree
#' @param nodes Named vector conaining the nodes to collapse.
#' @param collapse_mode String to select the aesthetics of the collapsing triangle, 'mixed', 'min' or 'max'.
#' @param node_colours Vector named with the same names as the nodes with the colour codes.
#' @param get_sp Function to extract the species from the tip.label.
#' @param tree_data Dataframe with the data linked to each species or sequence.
#' @param data_sp_column Column of the tree_data containing the species code.
#'
#' @return Collapsed tree ggplot plot object.
#' @export
#' @author Moisès Bernabeu
ggcollapse <- function(tree, nodes, collapse_mode='mixed', node_colours=NULL,
get_sp=NULL, tree_data=NULL, data_sp_column=NULL) {
if (!methods::is(tree, 'phylo')) {
stop('The tree must be a phylo object.')
}
# Get distances from the tree
dists <- ape::dist.nodes(tree)
# Annotate tree
to_drop <- c()
kept <- c()
ntips <- c()
for (node in 1:length(nodes)) {
# Getting descendants
desc <- phytools::getDescendants(tree, nodes[node])
# Getting just descendant tips
desc <- desc[which(desc <= ape::Ntip(tree))]
# Retrieving the number of tips in the collapsed node
ntips[node] <- length(desc)
# Getting the distances of the node to be collapsed
ndists <- dists[nodes[node], desc]
# Getting nodes to drop and to keep
to_drop_nnode <- as.numeric(names(ndists[-c(which.min(ndists), which.max(ndists))]))
to_keep_nnode <- as.numeric(names(ndists[c(which.min(ndists), which.max(ndists))]))
# Getting tip labels of the nodes to drop
to_drop <- c(to_drop, tree$tip.label[to_drop_nnode])
# Getting the tip labels
kept[[node]] <- c(tree$tip.label[to_keep_nnode])
}
# Prunning the tree to get the vertically symmetric tree
symm_tree <- treeio::drop.tip(tree, to_drop)
# Adjusting the branch lengths to be able to scale the tree horizontally
# and fit it in the final plot.
symm_tree$edge.length <- symm_tree$edge.length / max(diag(ape::vcv(symm_tree)))
# Annotating if all the proper data to annotate the tree is given
if (!is.null(tree_data) & !is.null(get_sp) & !is.null(data_sp_column)) {
symm_tree <- annotate_tree(symm_tree, tree_data, get_sp, data_sp_column)
symm_tree_phylo <- symm_tree@phylo
} else {
symm_tree_phylo <- symm_tree
}
new_nodes <- c()
offset <- c()
vjust <- c()
hjust <- c()
dists <- ape::dist.nodes(symm_tree_phylo)
for (node in 1:length(nodes)) {
new_nodes[node] <- ape::getMRCA(symm_tree_phylo, kept[[node]])
desc <- phytools::getDescendants(symm_tree_phylo, new_nodes[node])
desc <- desc[which(desc <= ape::Ntip(symm_tree_phylo))]
ndists <- dists[new_nodes[node], desc]
if (collapse_mode == 'max') {
offset[node] <- max(ndists)
vjust[node] <- 0.5
hjust[node] <- -0.015
} else if (collapse_mode == 'min') {
offset[node] <- min(ndists)
vjust[node] <- 0.5
hjust[node] <- -0.015
} else if (length(unique(round(ndists, digits = 1))) == 1) {
offset[node] <- mean(ndists)
vjust[node] <- 1
hjust[node] <- -0.015
} else if (collapse_mode == 'mixed') {
offset[node] <- 0.85 * max(ndists)
vjust[node] <- 1
hjust[node] <- 0
}
}
names(new_nodes) <- names(nodes)
names(offset) <- names(nodes)
names(vjust) <- names(nodes)
names(hjust) <- names(nodes)
p <- ggtree::ggtree(symm_tree, ladderize = TRUE, right = TRUE)
if (is.null(node_colours)) {
node_colours <- rep('grey80', length(nodes))
names(node_colours) <- names(nodes)
nodelab_colours <- rep('black', length(nodes))
names(nodelab_colours) <- names(nodes)
} else {
nodelab_colours <- node_colours
}
for (node in 1:length(new_nodes)) {
p <- ggtree::collapse(p, new_nodes[node], mode = collapse_mode,
fill = node_colours[names(nodes)[node]],
colour = 'black')
}
for (node in 1:length(new_nodes)) {
lab = paste0(names(nodes)[node], ' (', ntips[node], ')')
p <- p + ggtree::geom_cladelab(new_nodes[node],
label = lab,
offset.text = offset[node],
hjust = hjust[node],
vjust = vjust[node],
textcolour = nodelab_colours[names(nodes)[node]])
}
return(p)
}
ggcollapse(tree, mphy, collapse_mode = 'mixed', node_colours = cols)
sist <- get_sisters(atree, 36, 'group')
ggcollapse(tree, sist, collapse_mode = 'mixed') +
hexpand(0.15)
# Collapsing monophyletics of the group
mphy <- get_monophyletics(atree, 'group')
ggcollapse(tree, mphy, collapse_mode = 'mixed', node_colours = cols)
devtools::check()
devtools::load('.')
devtools::load_all('.')
get_sp <- function(header) {
return(header)
}
set.seed(2024-11-04)
tree <- rtree(20)
# Annotate tree
library(treeio)
set.seed(2024-11-04)
tree <- rtree(20)
tree_data <- data.frame(tip = tree$tip.label,
group = c(rep('A', 10), rep('B', 10)))
tree_data
atree <- annotate_tree(tree = tree,
tree_data = tree_data,
get_sp = get_sp,
data_sp_column = 1)
atree
# Get monophyletics
library(treeio)
get_sp <- function(header) {
return(header)
}
set.seed(2024-11-04)
tree <- rtree(20)
tree_data <- data.frame(tip = tree$tip.label,
group = c(rep('A', 10), rep('B', 10)))
atree <- annotate_tree(tree = tree,
tree_data = tree_data,
get_sp = get_sp,
data_sp_column = 1)
mphy <- get_monophyletics(atree, 'group')
mphy
ggtree(atree) +
geom_nodelab(aes(subset = node %in% mphy, label = node), geom = 'label') +
geom_tiplab(aes(label = group))
library(ggtree)
get_sp <- function(header) {
return(header)
}
set.seed(2024-11-04)
tree <- rtree(20)
tree_data <- data.frame(tip = tree$tip.label,
group = c(rep('A', 10), rep('B', 10)))
atree <- annotate_tree(tree = tree,
tree_data = tree_data,
get_sp = get_sp,
data_sp_column = 1)
mphy <- get_monophyletics(atree, 'group')
mphy
ggtree(atree) +
geom_nodelab(aes(subset = node %in% mphy, label = node), geom = 'label') +
geom_tiplab(aes(label = group))
# Get sisters
library(treeio)
get_sp <- function(header) {
return(header)
}
set.seed(2024-11-04)
library(ggtree)
get_sp <- function(header) {
return(header)
}
set.seed(2024-11-04)
tree <- rtree(20)
tree_data <- data.frame(tip = tree$tip.label,
group = c(rep('A', 10), rep('B', 10)))
atree <- annotate_tree(tree = tree,
tree_data = tree_data,
get_sp = get_sp,
data_sp_column = 1)
ggtree(atree) +
geom_nodelab(aes(label = node), geom = 'label') +
geom_tiplab()
# Getting sisters to node 36
get_sisters(tree, 36)
# Getting sisters to t7
get_sisters(atree, 't7')
# Getting sisters to node 36 annotated with the percentage of tips with a
# certain value of the given naming_column
get_sisters(atree, 36, naming_column = 'group')
# ggcollapse
library(treeio)
library(ggtree)
set.seed(2024-11-04)
tree <- rtree(20)
tree_data <- data.frame(tip = tree$tip.label,
group = c(rep('A', 10), rep('B', 10)))
atree <- annotate_tree(tree = tree,
tree_data = tree_data,
get_sp = get_sp,
data_sp_column = 1)
# Collapsing monophyletics of the group
mphy <- get_monophyletics(atree, 'group')
cols <- c('A' = 'steelblue', 'B' = 'darkorange')
set.seed(2024-11-04)
tree <- rtree(20)
tree_data <- data.frame(tip = tree$tip.label,
group = c(rep('A', 10), rep('B', 10)))
atree <- annotate_tree(tree = tree,
tree_data = tree_data,
get_sp = get_sp,
data_sp_column = 1)
# Collapsing monophyletics of the group
mphy <- get_monophyletics(atree, 'group')
cols <- c('A' = 'steelblue', 'B' = 'darkorange')
ggcollapse(tree, mphy, collapse_mode = 'mixed', node_colours = cols)
# Collapsing sisters
sist <- get_sisters(atree, 36, 'group')
ggcollapse(tree, sist, collapse_mode = 'mixed') +
hexpand(0.15)
devtools::load_all('')
devtools::load_all('.')
?ggcollapse
?annotate_tree
devtools::build_manual()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::load_all('.')
?annotate_tree
devtools::install('.')
devtools::install_github('moibernabeu/ggcollapse')
?annotate_tree
?ggcollapse
