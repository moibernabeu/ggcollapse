theme(axis.text.x = element_text(angle = 45, hjust = 0, vjust = 1)) +
scale_colour_gradient(high = "#132B43",
low = "#56B1F7") +
scale_x_discrete(position = "top")
ggplot(dat %>% filter(prevalence >= 0.5),
aes(donor, Pathway)) +
# geom_tile(fill = 'white') +
geom_point(aes(size = prevalence, colour = prevalence), shape = 15) +
facet_grid(Pathway.class~., scales='free', space = 'free') +
theme(axis.text.x = element_text(angle = 45, hjust = 0, vjust = 1)) +
scale_colour_gradient(high = "#132B43",
low = "#56B1F7") +
scale_x_discrete(position = "top")
library(tidyverse)
theme_set(theme_bw())
get_sp <- function(name) {
if (str_detect(name, 'rvdb')) {
return(str_split(name, '_', simplify = TRUE)[, 1])
} else {
return(str_split(name, '_', simplify = TRUE)[, 2])
}
}
# Loading data
lng <- read.csv('../../../../../current/mgil/documents/leca_V3/data/LECA_proteophylum.lng', sep = '\t', header = FALSE)
lng <- lng %>%
mutate(V2 = gsub('[a-z]{1,4}__', '', V2)) %>%
separate_wider_delim(V2, ';', names = c('stem', 'sg', 'div', 'd', 'p', 'c', 'o', 'f', 'g', 's')) %>%
rename('gnm' = 'V1') %>%
unique()
annotations <- read.csv('../data/all_donors_sp_annotation.tsv', sep = '\t', header = FALSE)
modules <- read.csv('../data/anvio_output.tsv', sep = '\t', header = FALSE)
transferomes <- read.csv('../outputs/pantransferome_KO_sisterKOs_mki.tsv', sep = '\t') %>%
filter(gotten)
# Annotating the data with the taxonomy
annotations <- annotations %>%
left_join(lng, by = c('V2' = 'gnm'))
modules <- modules %>%
left_join(lng, by = c('V2' = 'gnm'))
donors <- c()
for (i in unique(transferomes$donor)) {
donors[[i]] <- i
}
donors[['Mitoancestor']] <- c('Alphaproteobacteria', 'Gammaproteobacteria')
donors[['Arcancestor']] <- c('Asgardarchaeota')
donors[['Nucleocytoviricota']] <- NULL
# Setting thresholds
prop_KOs_in_LECA_threshold <- 0.50
panKOme_threshold <- 0.80
# pathwaise_completeness <- 0.70
# panmodulome_threshold <- 0.65
# Calculating the donor descendants, the genomes that have at least
# prop_KOs_in_LECA_threshold of the KOs present in the LECA transferome
dir.create('../outputs/donor_descendants/', showWarnings = FALSE, recursive = TRUE)
donor_descendants <- c()
pdf('../outputs/KOs_in_LECA_distr.pdf', width = 4.6, height = 3)
for (don in names(donors)) {
don_transf <- transferomes %>%
filter(donor == don)
don_transf <- don_transf$sister_KOs
don_annots <- annotations %>%
filter(sg %in% donors[[don]])
don_annots_summary <- don_annots %>%
group_by(V3, V2) %>%
summarise() %>%
arrange(V2) %>%
data.frame() %>%
group_by(V2) %>%
summarise(KOs_in_LECA = sum(V3 %in% don_transf), prop_KOs_in_LECA = sum(V3 %in% don_transf) / length(don_transf))
n <- don_annots_summary %>%
filter(prop_KOs_in_LECA >= prop_KOs_in_LECA_threshold) %>%
count()
p <- ggplot(don_annots_summary, aes(prop_KOs_in_LECA)) +
geom_histogram(alpha = 0.6, colour = 'black') +
geom_vline(xintercept = prop_KOs_in_LECA_threshold, lty = 4) +
labs(title = paste0(don, ' (', n$n[1], ' kept)'))
print(p)
kept_dons <- don_annots_summary %>%
filter(prop_KOs_in_LECA >= prop_KOs_in_LECA_threshold)
cat(kept_dons$V2, sep = '\n', file = paste0('../outputs/donor_descendants/', don, '.txt'))
donor_descendants[[don]] <- kept_dons$V2
}
dev.off()
# Getting the KOs that are present in at least panKOme_threshold % of the
# genomes of the given donor (donor descendants' panKOme)
panKOme <- c()
dir.create('../outputs/donor_panKOmes/')
pdf('../outputs/panKOmes_distr.pdf', width = 4.6, height = 3)
for (don in names(donors)) {
don_kos_summary <- annotations %>%
filter(V2 %in% donor_descendants[[don]]) %>%
group_by(V2, V3) %>%
summarise() %>%
data.frame() %>%
group_by(V3) %>%
summarise(n_gnms = n(), prop_gnms = n() / length(donor_descendants[[don]]))
nKOs <- don_kos_summary %>%
filter(prop_gnms >= panKOme_threshold) %>%
count()
nKOs <- nKOs$n[1]
p <- ggplot(don_kos_summary %>% filter(prop_gnms >= 0.02), aes(prop_gnms)) +
annotate('rect', xmin = panKOme_threshold, xmax = 1, ymin = -Inf, ymax = Inf, alpha=0.2) +
geom_histogram(alpha = 0.6, colour = 'black') +
coord_cartesian(xlim = c(0, 1)) +
labs(title = paste0(don, ' (', length(donor_descendants[[don]]), ' gnms / ', nKOs, ' KOs)'))
print(p)
don_kos <- don_kos_summary %>%
mutate(donor = don, ngenomes = length(donor_descendants[[don]]), gotten = prop_gnms >= panKOme_threshold)
panKOme <- rbind(panKOme, don_kos)
don_kos <- don_kos %>%
filter(prop_gnms >= panKOme_threshold)
don_panKOme <- data.frame(gene_id = paste0(don, '_', 1:length(don_kos$V3)),
enzyme_accession = don_kos$V3,
source = 'KOfam')
write.table(don_panKOme, file = paste0('../outputs/donor_panKOmes/', don, '.tsv'),
sep = '\t', quote = FALSE, row.names = FALSE)
}
dev.off()
write.table(panKOme, file = '../outputs/panKOmes.tsv', sep = '\t', quote = FALSE, row.names = FALSE)
# Getting the modules that are present in at least modulome_threshold % of the
# genomes of the given donor (donor descendants' panmodulome)
all_panmodulomes <- c()
dir.create('../outputs/donor_panmodulome/', showWarnings = FALSE, recursive = TRUE)
for (don in names(donors)) {
don_modules <- modules %>%
filter(sg %in% donors[[don]], V2 %in% donor_descendants[[don]]) %>%
group_by(V1) %>%
summarise(n_gnms = n_distinct(V2), ngenomes = length(donor_descendants[[don]]),
mean_completeness = mean(V7),
prop_gnms = n_distinct(V2) / ngenomes,
donor = don)
all_panmodulomes <- rbind(all_panmodulomes, don_modules)
write.table(don_modules, file = paste0('../outputs/donor_panmodulome/', don, '.tsv'), sep = '\t', quote = FALSE, row.names = FALSE)
}
write.table(don_modules, file = '../outputs/panmodulomes.tsv', sep = '\t', quote = FALSE, row.names = FALSE)
library(tidyverse)
features <- read.csv('../../../../../current/mgil/documents/leca_V3/outputs/donor_features/modules.tsv', sep = '\t')
features <- features %>%
select(Pathway.class, Pathway, Code) %>%
separate_longer_delim(Code, ';')
donors <- gsub('\\.tsv', '', list.files('../outputs/donor_panKOmes/'))
donor_feats <- c()
for (don in donors) {
# don_modules <- read.csv(paste0('../outputs/anvio_panKOmes/', don, '_modules.txt'), sep = '\t')
# don_modules <- don_modules %>%
#   filter(pathwise_module_is_complete == 'True' | proportion_unique_enzymes_present > 0)
don_modules <- read.csv(paste0('../outputs/donor_panmodulome/', don, '.tsv'), sep = '\t')
don_kos <- read.csv(paste0('../outputs/donor_panKOmes/', don, '.tsv'), sep = '\t')
don_ids <- c(don_modules$V1, don_kos$enzyme_accession)
donor_feats <- rbind(donor_feats, data.frame(features, donor = don, present = features$Code %in% don_ids))
}
donor_feats <- donor_feats %>%
group_by(Pathway.class, Pathway, donor) %>%
summarise(present = sum(present) / n())
ggplot(donor_feats, aes(Pathway, donor, shape = present > 0, alpha = present,
colour = Pathway.class)) +
geom_point(size = 5) +
facet_grid(~Pathway.class, scales = 'free', space = 'free') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_shape_manual(values = c('TRUE' = 16, 'FALSE' = 1)) +
theme(legend.position = 'none')
# V2 as Marina suggested
don_modules <- read.csv('../outputs/panmodulomes.tsv', sep = '\t')
don_kos <- read.csv('../outputs/panKOmes.tsv', sep = '\t')
dat <- rbind(don_modules %>%
filter(mean_completeness >= 0.5) %>%
mutate(prevalence = prop_gnms * mean_completeness) %>%
select(component = V1, prevalence, donor),
don_kos %>%
select(component = V3, prevalence = prop_gnms, donor))
dat <- dat %>%
filter(component %in% features$Code) %>%
distinct() %>%
left_join(features %>% distinct(), by = c('component' = 'Code'),
relationship = 'many-to-many') %>%
group_by(Pathway.class, Pathway, donor) %>%
summarise(prevalence = mean(prevalence))
ggplot(dat %>% filter(prevalence >= 0.5),
aes(donor, Pathway)) +
geom_point(aes(size = prevalence, colour = prevalence), shape = 15) +
facet_grid(Pathway.class~., scales='free', space = 'free') +
theme(axis.text.x = element_text(angle = 45, hjust = 0, vjust = 1)) +
scale_colour_gradient(high = "#132B43",
low = "#56B1F7") +
scale_x_discrete(position = "top")
ggplot(dat %>% filter(prevalence >= 0),
aes(donor, Pathway)) +
geom_point(aes(size = prevalence, colour = prevalence), shape = 15) +
facet_grid(Pathway.class~., scales='free', space = 'free') +
theme(axis.text.x = element_text(angle = 45, hjust = 0, vjust = 1)) +
scale_colour_gradient(high = "#132B43",
low = "#56B1F7") +
scale_x_discrete(position = "top")
ggplot(dat %>% filter(prevalence >= 0.25),
aes(donor, Pathway)) +
geom_point(aes(size = prevalence, colour = prevalence), shape = 15) +
facet_grid(Pathway.class~., scales='free', space = 'free') +
theme(axis.text.x = element_text(angle = 45, hjust = 0, vjust = 1)) +
scale_colour_gradient(high = "#132B43",
low = "#56B1F7") +
scale_x_discrete(position = "top")
ggplot(dat %>% filter(prevalence >= 0.25),
aes(donor, Pathway)) +
geom_point(aes(size = prevalence, colour = prevalence), shape = 15) +
facet_grid(Pathway.class~., scales='free', space = 'free') +
theme(axis.text.x = element_text(angle = 45, hjust = 0, vjust = 1)) +
scale_colour_gradient(high = "#132B43", low = "#56B1F7", guide = 'colourbar') +
scale_x_discrete(position = "top")
library(tidyverse)
features <- read.csv('../../../../../current/mgil/documents/leca_V3/outputs/donor_features/modules.tsv', sep = '\t')
features <- features %>%
select(Pathway.class, Pathway, Code) %>%
separate_longer_delim(Code, ';')
donors <- gsub('\\.tsv', '', list.files('../outputs/donor_panKOmes/'))
donor_feats <- c()
for (don in donors) {
# don_modules <- read.csv(paste0('../outputs/anvio_panKOmes/', don, '_modules.txt'), sep = '\t')
# don_modules <- don_modules %>%
#   filter(pathwise_module_is_complete == 'True' | proportion_unique_enzymes_present > 0)
don_modules <- read.csv(paste0('../outputs/donor_panmodulome/', don, '.tsv'), sep = '\t')
don_kos <- read.csv(paste0('../outputs/donor_panKOmes/', don, '.tsv'), sep = '\t')
don_ids <- c(don_modules$V1, don_kos$enzyme_accession)
donor_feats <- rbind(donor_feats, data.frame(features, donor = don, present = features$Code %in% don_ids))
}
donor_feats <- donor_feats %>%
group_by(Pathway.class, Pathway, donor) %>%
summarise(present = sum(present) / n())
ggplot(donor_feats, aes(Pathway, donor, shape = present > 0, alpha = present,
colour = Pathway.class)) +
geom_point(size = 5) +
facet_grid(~Pathway.class, scales = 'free', space = 'free') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_shape_manual(values = c('TRUE' = 16, 'FALSE' = 1)) +
theme(legend.position = 'none')
# V2 as Marina suggested
don_modules <- read.csv('../outputs/panmodulomes.tsv', sep = '\t')
don_kos <- read.csv('../outputs/panKOmes.tsv', sep = '\t')
dat <- rbind(don_modules %>%
filter(mean_completeness >= 0.5) %>%
mutate(prevalence = prop_gnms * mean_completeness) %>%
select(component = V1, prevalence, donor),
don_kos %>%
select(component = V3, prevalence = prop_gnms, donor))
dat <- dat %>%
filter(component %in% features$Code) %>%
distinct() %>%
left_join(features %>% distinct(), by = c('component' = 'Code'),
relationship = 'many-to-many') %>%
group_by(Pathway.class, Pathway, donor) %>%
summarise(prevalence = mean(prevalence))
ggplot(dat %>% filter(prevalence >= 0.25),
aes(donor, Pathway)) +
geom_point(aes(size = prevalence, colour = prevalence), shape = 15) +
facet_grid(Pathway.class~., scales='free', space = 'free') +
theme(axis.text.x = element_text(angle = 45, hjust = 0, vjust = 1)) +
scale_colour_gradient(high = "#132B43", low = "#56B1F7") +
scale_x_discrete(position = "top")
library(tidyverse)
features <- read.csv('../../../../../current/mgil/documents/leca_V3/outputs/donor_features/modules.tsv', sep = '\t')
features <- features %>%
select(Pathway.class, Pathway, Code) %>%
separate_longer_delim(Code, ';')
donors <- gsub('\\.tsv', '', list.files('../outputs/donor_panKOmes/'))
donor_feats <- c()
for (don in donors) {
# don_modules <- read.csv(paste0('../outputs/anvio_panKOmes/', don, '_modules.txt'), sep = '\t')
# don_modules <- don_modules %>%
#   filter(pathwise_module_is_complete == 'True' | proportion_unique_enzymes_present > 0)
don_modules <- read.csv(paste0('../outputs/donor_panmodulome/', don, '.tsv'), sep = '\t')
don_kos <- read.csv(paste0('../outputs/donor_panKOmes/', don, '.tsv'), sep = '\t')
don_ids <- c(don_modules$V1, don_kos$enzyme_accession)
donor_feats <- rbind(donor_feats, data.frame(features, donor = don, present = features$Code %in% don_ids))
}
donor_feats <- donor_feats %>%
group_by(Pathway.class, Pathway, donor) %>%
summarise(present = sum(present) / n())
ggplot(donor_feats, aes(Pathway, donor, shape = present > 0, alpha = present,
colour = Pathway.class)) +
geom_point(size = 5) +
facet_grid(~Pathway.class, scales = 'free', space = 'free') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_shape_manual(values = c('TRUE' = 16, 'FALSE' = 1)) +
theme(legend.position = 'none')
# V2 as Marina suggested
don_modules <- read.csv('../outputs/panmodulomes.tsv', sep = '\t')
don_kos <- read.csv('../outputs/panKOmes.tsv', sep = '\t')
dat <- rbind(don_modules %>%
filter(mean_completeness >= 0.5) %>%
mutate(prevalence = prop_gnms * mean_completeness) %>%
select(component = V1, prevalence, donor),
don_kos %>%
select(component = V3, prevalence = prop_gnms, donor))
dat <- dat %>%
filter(component %in% features$Code) %>%
distinct() %>%
left_join(features %>% distinct(), by = c('component' = 'Code'),
relationship = 'many-to-many') %>%
group_by(Pathway.class, Pathway, donor) %>%
summarise(prevalence = mean(prevalence))
ggplot(dat %>% filter(prevalence >= 0.25),
aes(donor, Pathway)) +
geom_point(aes(size = prevalence, colour = prevalence), shape = 15) +
facet_grid(Pathway.class~., scales='free', space = 'free') +
theme(axis.text.x = element_text(angle = 45, hjust = 0, vjust = 1)) +
scale_colour_gradient(high = "#132B43", low = "#56B1F7") +
scale_x_discrete(position = "top")
library(tidyverse)
features <- read.csv('../../../../../current/mgil/documents/leca_V3/outputs/donor_features/modules.tsv', sep = '\t')
features <- features %>%
select(Pathway.class, Pathway, Code) %>%
separate_longer_delim(Code, ';')
donors <- gsub('\\.tsv', '', list.files('../outputs/donor_panKOmes/'))
donor_feats <- c()
for (don in donors) {
# don_modules <- read.csv(paste0('../outputs/anvio_panKOmes/', don, '_modules.txt'), sep = '\t')
# don_modules <- don_modules %>%
#   filter(pathwise_module_is_complete == 'True' | proportion_unique_enzymes_present > 0)
don_modules <- read.csv(paste0('../outputs/donor_panmodulome/', don, '.tsv'), sep = '\t')
don_kos <- read.csv(paste0('../outputs/donor_panKOmes/', don, '.tsv'), sep = '\t')
don_ids <- c(don_modules$V1, don_kos$enzyme_accession)
donor_feats <- rbind(donor_feats, data.frame(features, donor = don, present = features$Code %in% don_ids))
}
donor_feats <- donor_feats %>%
group_by(Pathway.class, Pathway, donor) %>%
summarise(present = sum(present) / n())
ggplot(donor_feats, aes(Pathway, donor, shape = present > 0, alpha = present,
colour = Pathway.class)) +
geom_point(size = 5) +
facet_grid(~Pathway.class, scales = 'free', space = 'free') +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
scale_shape_manual(values = c('TRUE' = 16, 'FALSE' = 1)) +
theme(legend.position = 'none')
# V2 as Marina suggested
don_modules <- read.csv('../outputs/panmodulomes.tsv', sep = '\t')
don_kos <- read.csv('../outputs/panKOmes.tsv', sep = '\t')
dat <- rbind(don_modules %>%
filter(mean_completeness >= 0.5) %>%
mutate(prevalence = prop_gnms * mean_completeness) %>%
select(component = V1, prevalence, donor),
don_kos %>%
select(component = V3, prevalence = prop_gnms, donor))
dat <- dat %>%
filter(component %in% features$Code) %>%
distinct() %>%
left_join(features %>% distinct(), by = c('component' = 'Code'),
relationship = 'many-to-many') %>%
group_by(Pathway.class, Pathway, donor) %>%
summarise(prevalence = mean(prevalence))
ggplot(dat %>% filter(prevalence >= 0.25),
aes(donor, Pathway)) +
geom_point(aes(size = prevalence, colour = prevalence), shape = 15) +
facet_grid(Pathway.class~., scales='free', space = 'free') +
theme(axis.text.x = element_text(angle = 45, hjust = 0, vjust = 1)) +
scale_colour_gradient(high = "#132B43", low = "#56B1F7") +
scale_x_discrete(position = "top")
prevalence
dat %>% filter(prevalence >= 0.25)
ggplot(dat %>% filter(prevalence >= 0),
aes(donor, Pathway)) +
geom_point(aes(size = prevalence, colour = prevalence), shape = 15) +
facet_grid(Pathway.class~., scales='free', space = 'free') +
theme(axis.text.x = element_text(angle = 45, hjust = 0, vjust = 1)) +
scale_colour_gradient(high = "#132B43", low = "#56B1F7") +
scale_x_discrete(position = "top")
pdf('../outputs/pamatrix_hypothesis_met.pdf', height = 9, width = 6)
ggplot(dat %>% filter(prevalence >= 0),
aes(donor, Pathway)) +
geom_point(aes(size = prevalence, colour = prevalence), shape = 15) +
facet_grid(Pathway.class~., scales='free', space = 'free') +
theme(axis.text.x = element_text(angle = 45, hjust = 0, vjust = 1)) +
scale_colour_gradient(high = "#132B43", low = "#56B1F7") +
scale_x_discrete(position = "top")
dev.off()
pdf('../outputs/pamatrix_hypothesis_met.pdf', height = 9 * 1.5, width = 6 * 1.5)
ggplot(dat %>% filter(prevalence >= 0),
aes(donor, Pathway)) +
geom_point(aes(size = prevalence, colour = prevalence), shape = 15) +
facet_grid(Pathway.class~., scales='free', space = 'free') +
theme(axis.text.x = element_text(angle = 45, hjust = 0, vjust = 1)) +
scale_colour_gradient(high = "#132B43", low = "#56B1F7") +
scale_x_discrete(position = "top")
dev.off()
pdf('../outputs/pamatrix_hypothesis_met.pdf', height = 9 * 1.15, width = 6 * 1.15)
ggplot(dat %>% filter(prevalence >= 0),
aes(donor, Pathway)) +
geom_point(aes(size = prevalence, colour = prevalence), shape = 15) +
facet_grid(Pathway.class~., scales='free', space = 'free') +
theme(axis.text.x = element_text(angle = 45, hjust = 0, vjust = 1)) +
scale_colour_gradient(high = "#132B43", low = "#56B1F7") +
scale_x_discrete(position = "top")
dev.off()
pdf('../outputs/pamatrix_hypothesis_met.pdf', height = 9 * 1.15, width = 5.5 * 1.15)
ggplot(dat %>% filter(prevalence >= 0),
aes(donor, Pathway)) +
geom_point(aes(size = prevalence, colour = prevalence), shape = 15) +
facet_grid(Pathway.class~., scales='free', space = 'free') +
theme(axis.text.x = element_text(angle = 45, hjust = 0, vjust = 1)) +
scale_colour_gradient(high = "#132B43", low = "#56B1F7") +
scale_x_discrete(position = "top")
dev.off()
pdf('../outputs/pamatrix_hypothesis_met.pdf', height = 9 * 1.15, width = 5.7 * 1.15)
ggplot(dat %>% filter(prevalence >= 0),
aes(donor, Pathway)) +
geom_point(aes(size = prevalence, colour = prevalence), shape = 15) +
facet_grid(Pathway.class~., scales='free', space = 'free') +
theme(axis.text.x = element_text(angle = 45, hjust = 0, vjust = 1)) +
scale_colour_gradient(high = "#132B43", low = "#56B1F7") +
scale_x_discrete(position = "top")
dev.off()
x <- 0:100/100
x
y <- x * 2
plot(x, y)
y <- x ^ 2
plot(x, y)
x <- -100:100/100
x
y <- x ^ 2
plot(x, y)
y <- x ^ 2 + rnorm(length(x), sd = 0.1)
plot(x, y)
x <- -100:100/100
y1 <- x ^ 2 + rnorm(length(x), sd = 0.1)
y2 <- x ^ 2 - rnorm(length(x), sd = 0.1)
plot(x, y)
plot(x, y1)
points(x, y2)
points(x, y2, col = 'red')
plot(x, y1, col = 'blue', shape = 21)
plot(x, y1, col = 'blue', shape = 1)
plot(x, y1, col = 'blue', shape = 2)
x <- -100:100/100
y1 <- x ^ 2 + rnorm(length(x), sd = 0.1)
y2 <- x ^ 2 - rnorm(length(x), sd = 0.1)
plot(x, y1, col = 'blue', shape = 2)
plot(x, y1, col = 'blue', pch = 2)
plot(x, y1, col = 'blue', pch = 21)
plot(x, y1, col = 'blue', pch = 1)
plot(x, y1, col = 'blue', pch = 2)
plot(x, y1, col = 'blue', pch = 3)
plot(x, y1, col = 'blue', pch = 19)
points(x, y2, col = 'red', pch = 19)
plot(x, y1, col = 'blue', pch = 19)
points(x, y2, col = 'red', pch = 19)
points(x, y1 - y2)
points(x, y1 - y2, col = 'black', pch = 19)
setwd('/home/mgilbern/Documents/cluster/new_software/general/ggcollapse')
library(tidyverse)
tibble()
aaa < tibble()
aaa <- tibble()
help('ggcollapse')
help(package='ggcollapse')
==ggcollapse
??ggcollapse
library(treeio)
get_sp <- function(header) {
return(header)
}
set.seed(2024-11-04)
tree <- rtree(20)
tree_data <- data.frame(tip = tree$tip.label,
group = c(rep('A', 10), rep('B', 10)))
tree_data
as.tibble(tree_data)
tibble(tree_data)
atree <- annotate_tree(tree = tree,
tree_data = tibble(tree_data),
get_sp = get_sp,
data_sp_column = 1)
library(ggcollapse)
devtools::install_github('moibernabeu/ggcollapse')
library(ggcollapse)
atree <- annotate_tree(tree = tree,
tree_data = tibble(tree_data),
get_sp = get_sp,
data_sp_column = 1)
if (type(aaa))
type(aaa)
class(aaa)
typeof(aaa)
aaa
is.tibble(aaa)
is_tibble(aaa)
data.frame(aaa)
#'
#' @param tree Phylogenetic tree imported with the treeio::read.tree().
#' @param tree_data Dataframe containing information for the species in the tree.
#' @param get_sp function to extract the species code from the tip.label.
#' @param data_sp_column Column containing the species code.
#'
#' @return A phylo4 tree object with a data frame with the annotations.
#' @export
#' @author Moisès Bernabeu
#' @example man/examples/annotate_tree.R
annotate_tree <- function(tree, tree_data, get_sp, data_sp_column) {
if (is_tibble(tree_data)) {
tree_data <- data.frame(tree_data)
}
row.names(tree_data) <- tree_data[, data_sp_column]
ttree <- treeio::as_tibble(tree)
seqids <- ttree$label[1:ape::Ntip(ttree)]
taxids <- get_sp(seqids)
tree_dat <- treeio::tibble(label = seqids, tree_data[taxids, ])
otree <- treeio::full_join(ttree, tree_dat, by = 'label')
otree <- treeio::as.treedata(otree)
return(otree)
}
atree <- annotate_tree(tree = tree,
tree_data = tibble(tree_data),
get_sp = get_sp,
data_sp_column = 1)
atree
